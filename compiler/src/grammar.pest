Program = { SOI ~ (Stmt)* ~ EOI }

Stmt = {
    ExprStmt |
    PrintStmt |
    ReturnStmt |
    VarDefnStmt |
    FuncDefnStmt |
    IfElseStmt |
    IfStmt |
    WhileLoop |
    Block
}

ExprStmt = { Expr ~ SEMI }
PrintStmt = { "print" ~ Expr ~ SEMI }
VarDefnStmt = { "let" ~ ID ~ "=" ~ Expr ~ SEMI }
FuncDefnStmt = { "let" ~ ID ~ "=" ~ "fn" ~ ArgList ~ Block ~ SEMI }
ReturnStmt = { "return" ~ Expr ~ SEMI }
IfStmt = { "if" ~ "(" ~ Expr ~ ")" ~ Block }
IfElseStmt = { "if" ~ "(" ~ Expr ~ ")" ~ Block ~ "else" ~ Block }
Block = { "{" ~ (Stmt)* ~ "}" }
WhileLoop = {
    "while" ~ "(" ~ Expr ~ ")" ~ Block
}

ArgList = {
    ( "(" ~ ")" ) |
    ( "(" ~ ID ~ ("," ~ ID)* ~ ")" )
}


Expr = { Comparand ~ (CompExpr)* }
CompExpr = { (GEQ | GT | EQ | NEQ | LEQ | LT) ~ Comparand }
Comparand = { Factor ~ (AddExpr)* }
AddExpr = { (PLUS | MINUS) ~ Factor }
Factor = { Primary ~ (MulExpr)* }
MulExpr = { (TIMES | DIVIDE) ~ Primary }

Primary = {
    ParenExpr |
    Number |
    TRUE |
    FALSE |
    // NB: this can't be below variable access, because they
    // look indistinguishable, so PEG reads a variable and stops,
    // resulting in _no parse_ (not an ambiguity thing).
    // :think: this seems bad, and makes me nervous about the whole
    // process
    FnCallExpr |
    VariableAccess |
    UnaryExpr
}

FnCallExpr = {
    // TODO: can't call a function without giving it a name;
    // no true function exprs / lambda
    ID ~ CallExprList
}

CallExprList = {
    ("(" ~ ")" ) |
    ("(" ~ Expr ~ ( "," ~ Expr )* ~ ")" )
}

TRUE = { "true" }
FALSE = { "false" }

VariableAccess = { ID }

ParenExpr = {
    "(" ~ Expr ~ ")"
}

UnaryExpr = { (NEG | NOT) ~ Primary }

PLUS = { "+" }
MINUS = { "-" }

TIMES = { "*" }
DIVIDE = { "/" }

NEG = { "-" }
NOT = { "!" }
SEMI = { ";" }

GEQ = { ">=" }
GT = { ">" }
LEQ = { "<=" }
LT = { "<" }
EQ = { "==" }
NEQ = { "!=" }

Number = @{ ("-")? ~ (ASCII_DIGIT)+ }

ID = @{ 
    !(Reserved) ~
    ( ASCII_LETTER ~ (ASCII_LETTER | ASCII_DIGIT | "_")* )
}

Reserved = {
    "print" | "let" | "if" | "else" | "return"
}

ASCII_LETTER = _{ ('A'..'Z') | ('a'..'z') }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
